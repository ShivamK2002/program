{"slug":"find-the-eigenvalues-of-a-matrix","title":"Find the eigenvalues of a matrix","trackId":5575,"tags":["Java","TypeScript","Python"],"contributors":["Heyeso","ShadyResurrected","anandfresh","harshraj8843"],"contentHtml":"<h2>Write a program to find the eigenvalues of a matrix</h2>\n<p>The eigenvalues and eigenvectors of a linear transformation are the values and vectors that determine the transformation. The eigenvalues of a matrix A are the values 位 for which the matrix equation Av = 位v has a non-trivial solution.</p>\n<pre><code>Input  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n16.116843969807043\n-1.1168439698070427\n0.9999999999999998\n</code></pre>\n<hr>\n<pre><code>import java.util.Arrays;\n\npublic class FindTheEigenvaluesOfAMatrix {\n    public static void main(String[] args) {\n        // Read the input matrix\n        Scanner scanner = new Scanner(System.in);\n        double[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\n        // Calculate the eigenvalues\n        double[] eigenvalues = calculateEigenvalues(matrix);\n\n        // Print the eigenvalues\n        System.out.println(Arrays.toString(eigenvalues));\n    }\n\n    public static double[] calculateEigenvalues(double[][] matrix) {\n        // Create the companion matrix\n        double[][] companionMatrix = createCompanionMatrix(matrix);\n\n        // Calculate the eigenvalues of the companion matrix\n        double[] eigenvalues = calculateEigenvalues(companionMatrix);\n\n        return eigenvalues;\n    }\n\n    public static double[][] createCompanionMatrix(double[][] matrix) {\n        // Get the size of the matrix\n        int size = matrix.length;\n\n        // Create the companion matrix\n        double[][] companionMatrix = new double[size][size];\n        for (int i = 0; i &#x3C; size; i++) {\n            for (int j = 0; j &#x3C; size; j++) {\n                if (i &#x3C; size - 1) {\n                    companionMatrix[i][j] = -matrix[i + 1][j] / matrix[i][0];\n                } else {\n                    companionMatrix[i][j] = 0;\n                }\n            }\n        }\n\n        return companionMatrix;\n    }\n}\n</code></pre>\n<pre><code>import { eigs, MathNumericType, round } from \"mathjs\";\n\n/* Sample matrix. */\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\n/* Destructuring the object returned by `eigs(matrix)` and assigning the `values` property to the\nvariable `eigenvalues`. */\nconst { values } = eigs(matrix);\n/* Rounding the eigenvalues to 15 decimal places. */\nconst eigenvalues = values.map((num: MathNumericType | MathNumericType[]) =>\n  round(num, 15)\n);\n\nconsole.log(eigenvalues); // Expected: [ 1e-15, -1.116843969807044, 16.116843969807043 ]\n</code></pre>\n<pre><code>import numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nw, v = np.linalg.eig(arr)\n\n[print(x) for x in np.round(w, decimals=4)]\n</code></pre>\n","markdown":"\n## Write a program to find the eigenvalues of a matrix\n\nThe eigenvalues and eigenvectors of a linear transformation are the values and vectors that determine the transformation. The eigenvalues of a matrix A are the values 位 for which the matrix equation Av = 位v has a non-trivial solution.\n\n```\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n16.116843969807043\n-1.1168439698070427\n0.9999999999999998\n```\n\n---\n\n<CodeBlock slug=\"find-the-eigenvalues-of-a-matrix\" >\n\n```java\nimport java.util.Arrays;\n\npublic class FindTheEigenvaluesOfAMatrix {\n    public static void main(String[] args) {\n        // Read the input matrix\n        Scanner scanner = new Scanner(System.in);\n        double[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\n        // Calculate the eigenvalues\n        double[] eigenvalues = calculateEigenvalues(matrix);\n\n        // Print the eigenvalues\n        System.out.println(Arrays.toString(eigenvalues));\n    }\n\n    public static double[] calculateEigenvalues(double[][] matrix) {\n        // Create the companion matrix\n        double[][] companionMatrix = createCompanionMatrix(matrix);\n\n        // Calculate the eigenvalues of the companion matrix\n        double[] eigenvalues = calculateEigenvalues(companionMatrix);\n\n        return eigenvalues;\n    }\n\n    public static double[][] createCompanionMatrix(double[][] matrix) {\n        // Get the size of the matrix\n        int size = matrix.length;\n\n        // Create the companion matrix\n        double[][] companionMatrix = new double[size][size];\n        for (int i = 0; i < size; i++) {\n            for (int j = 0; j < size; j++) {\n                if (i < size - 1) {\n                    companionMatrix[i][j] = -matrix[i + 1][j] / matrix[i][0];\n                } else {\n                    companionMatrix[i][j] = 0;\n                }\n            }\n        }\n\n        return companionMatrix;\n    }\n}\n```\n\n```ts\nimport { eigs, MathNumericType, round } from \"mathjs\";\n\n/* Sample matrix. */\nconst matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9],\n];\n\n/* Destructuring the object returned by `eigs(matrix)` and assigning the `values` property to the\nvariable `eigenvalues`. */\nconst { values } = eigs(matrix);\n/* Rounding the eigenvalues to 15 decimal places. */\nconst eigenvalues = values.map((num: MathNumericType | MathNumericType[]) =>\n  round(num, 15)\n);\n\nconsole.log(eigenvalues); // Expected: [ 1e-15, -1.116843969807044, 16.116843969807043 ]\n```\n\n```py\nimport numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\nw, v = np.linalg.eig(arr)\n\n[print(x) for x in np.round(w, decimals=4)]\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-01-20T14:40:36Z"}