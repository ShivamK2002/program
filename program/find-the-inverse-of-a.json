{"slug":"find-the-inverse-of-a","title":"Find the inverse of a","trackId":5271,"tags":["Java","Python"],"contributors":["ShadyResurrected","anandfresh","harshraj8843"],"contentHtml":"<h2>Write a program to find the inverse of a</h2>\n<p>The inverse of a square matrix A is another square matrix B such that the product of A and B is the identity matrix I. The inverse of A is denoted as A-1.</p>\n<pre><code>Input  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n-0.16666666666666666 0.3333333333333333 -0.16666666666666666\n0.3333333333333333 -0.6666666666666666 0.3333333333333333\n-0.16666666666666666 0.3333333333333333 -0.16666666666666666\n</code></pre>\n<hr>\n<pre><code>import java.util.*;\n\npublic class FindTheInverseOfA {\n\n    public static double[][] inverse(double[][] matrix) {\n        int n = matrix.length;\n        double[][] inverse = new double[n][n];\n\n        // create the identity matrix\n        for (int i = 0; i &#x3C; n; i++) {\n            inverse[i][i] = 1;\n        }\n\n        // augment the matrix with the identity matrix\n        double[][] augmentedMatrix = new double[n][2 * n];\n        for (int i = 0; i &#x3C; n; i++) {\n            for (int j = 0; j &#x3C; n; j++) {\n                augmentedMatrix[i][j] = matrix[i][j];\n            }\n            for (int j = n; j &#x3C; 2 * n; j++) {\n                augmentedMatrix[i][j] = inverse[i][j - n];\n            }\n        }\n\n        // perform Gaussian elimination\n        for (int i = 0; i &#x3C; n; i++) {\n            double pivot = augmentedMatrix[i][i];\n            for (int j = i; j &#x3C; 2 * n; j++) {\n                augmentedMatrix[i][j] /= pivot;\n            }\n            for (int k = 0; k &#x3C; n; k++) {\n                if (k != i) {\n                    double factor = augmentedMatrix[k][i];\n                    for (int j = i; j &#x3C; 2 * n; j++) {\n                        augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];\n                    }\n                }\n            }\n        }\n\n        // extract the inverse from the augmented matrix\n        for (int i = 0; i &#x3C; n; i++) {\n            for (int j = n; j &#x3C; 2 * n; j++) {\n                inverse[i][j - n] = augmentedMatrix[i][j];\n            }\n        }\n\n        return inverse;\n    }\n\n    public static void main(String[] args) {\n        double[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n        double[][] inverse = inverse(matrix);\n\n        for (int i = 0; i &#x3C; n; i++) {\n            for (int j = 0; j &#x3C; n; j++) {\n                System.out.print(inverse[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n</code></pre>\n<pre><code>import numpy as np\n\ninputArray = np.array([[4, 5, 1],\n   [3, 4, 12],\n   [10, 2, 1]])\n\nresultInverse= np.linalg.inv(inputArray)\n\nprint(resultInverse)\n</code></pre>\n","markdown":"\n## Write a program to find the inverse of a\n\nThe inverse of a square matrix A is another square matrix B such that the product of A and B is the identity matrix I. The inverse of A is denoted as A<sup>-1</sup>.\n\n```\nInput  :\n1 2 3\n4 5 6\n7 8 9\n\nOutput :\n-0.16666666666666666 0.3333333333333333 -0.16666666666666666\n0.3333333333333333 -0.6666666666666666 0.3333333333333333\n-0.16666666666666666 0.3333333333333333 -0.16666666666666666\n```\n\n---\n\n<CodeBlock slug=\"find-the-inverse-of-a\" >\n\n```java\nimport java.util.*;\n\npublic class FindTheInverseOfA {\n\n    public static double[][] inverse(double[][] matrix) {\n        int n = matrix.length;\n        double[][] inverse = new double[n][n];\n\n        // create the identity matrix\n        for (int i = 0; i < n; i++) {\n            inverse[i][i] = 1;\n        }\n\n        // augment the matrix with the identity matrix\n        double[][] augmentedMatrix = new double[n][2 * n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                augmentedMatrix[i][j] = matrix[i][j];\n            }\n            for (int j = n; j < 2 * n; j++) {\n                augmentedMatrix[i][j] = inverse[i][j - n];\n            }\n        }\n\n        // perform Gaussian elimination\n        for (int i = 0; i < n; i++) {\n            double pivot = augmentedMatrix[i][i];\n            for (int j = i; j < 2 * n; j++) {\n                augmentedMatrix[i][j] /= pivot;\n            }\n            for (int k = 0; k < n; k++) {\n                if (k != i) {\n                    double factor = augmentedMatrix[k][i];\n                    for (int j = i; j < 2 * n; j++) {\n                        augmentedMatrix[k][j] -= factor * augmentedMatrix[i][j];\n                    }\n                }\n            }\n        }\n\n        // extract the inverse from the augmented matrix\n        for (int i = 0; i < n; i++) {\n            for (int j = n; j < 2 * n; j++) {\n                inverse[i][j - n] = augmentedMatrix[i][j];\n            }\n        }\n\n        return inverse;\n    }\n\n    public static void main(String[] args) {\n        double[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n        double[][] inverse = inverse(matrix);\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                System.out.print(inverse[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n```\n\n```py\nimport numpy as np\n\ninputArray = np.array([[4, 5, 1],\n   [3, 4, 12],\n   [10, 2, 1]])\n\nresultInverse= np.linalg.inv(inputArray)\n\nprint(resultInverse)\n```\n\n</CodeBlock>\n\n","latestUpdateDate":"2023-01-12T06:23:25Z"}